
DEFINE input:inference "ont.cpi"

PREFIX ent:  <http://codinuum.com/fact/entity/>
PREFIX rel:  <http://codinuum.com/fact/version/release/>
PREFIX ext:  <http://codinuum.com/fact/external/>
PREFIX src:  <http://codinuum.com/ontologies/2012/10/source-code-entity#>
PREFIX ver:  <http://codinuum.com/ontologies/2012/10/versioning#>
PREFIX chg:  <http://codinuum.com/ontologies/2012/10/primitive-change#>
PREFIX java: <http://codinuum.com/ontologies/2012/10/java-entity#>
PREFIX c:    <http://codinuum.com/ontologies/2012/10/c-entity#>

INSERT {
  ?ivk java:mayInvoke ?sig .
  ?ivk java:mayInvokeMethod ?meth .
}
WHERE {

  FILTER NOT EXISTS {
    ?ivk java:mayInvoke [] ;
         java:mayInvokeMethod [] .
  }

  {
    SELECT DISTINCT ?mname0 ?tdecl0 ?meth ?mfqn ?msig ?tdecl ?mname ?ver ?ivk
    WHERE {

      {
        SELECT DISTINCT ?mname0 ?tdecl0 ?meth ?mfqn ?msig ?tdecl ?mname ?ver
        WHERE {

          {
            SELECT DISTINCT ?mname0 ?tdecl0 ?meth ?mfqn ?msig ?tdecl1 ?ver
            WHERE {

              {
                SELECT DISTINCT ?mname0 ?tdecl0 ?meth ?mfqn ?msig
                WHERE {

                  ?meth a java:MethodDeclaration ;
                        java:name ?mname0 ;
                        java:nParameters 0 ;
                        java:inTypeDeclaration ?tdecl0 ;
                        src:child5 ?body ;
                        java:fullyQualifiedName ?mfqn ;
                        java:signature ?msig .

                } GROUP BY ?mname0 ?tdecl0 ?meth ?mfqn ?msig
              }

              ?tdecl1 java:subTypeOf ?tdecl0 OPTION (TRANSITIVE,
                                                     T_DISTINCT,
                                                     #T_SHORTEST_ONLY,
                                                     T_NO_CYCLES,
                                                     T_MIN(0)) .

              ?tdecl1 ver:version ?ver .

            } GROUP BY ?mname0 ?tdecl0 ?meth ?mfqn ?msig ?tdecl1 ?ver
          }

          {
            ?tdecl1 java:fullyQualifiedName ?tfqn .
            BIND (?tdecl1 as ?tdecl)
          } UNION {
            ?tdecl a java:TypeDeclaration ;
                   java:inTypeDeclaration+ ?tdecl1 ;
                   java:fullyQualifiedName ?tfqn ;
                   ver:version ?ver .
          }
          # ?tdecl java:inTypeDeclaration* ?tdecl1 .
          # ?tdecl java:fullyQualifiedName ?tfqn ;
          #        ver:version ?ver .

          BIND (CONCAT(?tfqn, ".", ?mname0) AS ?mname)

          ?tdecl0 ver:version ?ver .

        } GROUP BY ?mname0 ?tdecl0 ?meth ?mfqn ?msig ?tdecl ?mname ?ver
      }

      ?ivk a java:Invocation ;
           java:nArguments 0 ;
           java:name ?mname .

    } GROUP BY ?mname0 ?tdecl0 ?meth ?mfqn ?msig ?tdecl ?mname ?ver ?ivk
  }

  FILTER (EXISTS {
    ?ivk a java:TypeMethodInvocation .
  } || EXISTS {
    ?ivk a java:TypeMethodInvocationStatement .
  })

  FILTER EXISTS {
    ?ivk java:inTypeDeclaration/ver:version ?ver .
  }

  BIND (CONCAT(?mfqn, ?msig) AS ?sig)

}
