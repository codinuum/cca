
DEFINE input:inference "ont.cpi"

PREFIX ent:  <http://codinuum.com/fact/entity/>
PREFIX rel:  <http://codinuum.com/fact/version/release/>
PREFIX ext:  <http://codinuum.com/fact/external/>
PREFIX src:  <http://codinuum.com/ontologies/2012/10/source-code-entity#>
PREFIX ver:  <http://codinuum.com/ontologies/2012/10/versioning#>
PREFIX chg:  <http://codinuum.com/ontologies/2012/10/primitive-change#>
PREFIX java: <http://codinuum.com/ontologies/2012/10/java-entity#>
PREFIX c:    <http://codinuum.com/ontologies/2012/10/c-entity#>
PREFIX soot: <http://codinuum.com/ontologies/2016/05/soot#>

INSERT {
  ?ivk java:mayInvoke ?sig .
  ?ivk java:mayInvokeMethod ?meth .
}
WHERE {

  FILTER NOT EXISTS {
    ?ivk java:mayInvoke [] ;
         java:mayInvokeMethod [] .
  }

  {
    SELECT DISTINCT ?ename ?class ?meth ?ivk
    WHERE {

      {
        SELECT DISTINCT ?ename ?class
        (COUNT(DISTINCT ?meth0) AS ?n)
        (SAMPLE(?meth0) AS ?meth)
        WHERE {

          ?meth0 a java:MethodDeclaration ;
                 java:inTypeDeclaration ?class0 ;
                 src:child5 ?body0 ;
                 java:extendedName ?ename .

          ?class a java:TypeDeclaration ;
                 java:subClassOf ?class0 OPTION (TRANSITIVE,
                                                 T_DISTINCT,
                                                 T_NO_CYCLES,
                                                 T_MIN(0)) .
          FILTER EXISTS {
            ?class0 ver:version ?ver .
            ?class ver:version ?ver .
          }
        } GROUP BY ?ename ?class
      }

      FILTER (?n = 1)

      ?ivk a java:Invocation ;
           a ?cat OPTION (INFERENCE NONE) ;
           java:extendedName ?ename .

      FILTER (?cat IN (java:SimpleMethodInvocation,
                       java:SimpleMethodInvocationStatement))

    } GROUP BY ?ename ?class ?meth ?ivk
  }

  ?ivk java:inTypeDeclaration ?class OPTION (TRANSITIVE,
                                             T_DISTINCT,
                                             T_NO_CYCLES,
                                             T_SHORTEST_ONLY,
                                             T_MIN(1)) .

  ?meth java:fullyQualifiedName ?mfqn ;
        java:signature ?msig .

  BIND (CONCAT(?mfqn, ?msig) AS ?sig)

}
